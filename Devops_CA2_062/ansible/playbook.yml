---
# ansible/playbook.yml - DevOps CA2 Configuration Management
- name: Configure Runtime Environment for Recruitment Platform
  hosts: local
  become: yes
  gather_facts: yes
  
  vars:
    app_user: recruitment_app
    app_dir: /opt/recruitment_platform
    node_version: "20.x"
  
  tasks:
    # Task 1: Install Required Packages
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: packages
    
    - name: Install prerequisite packages
      apt:
        name:
          - curl
          - git
          - build-essential
        state: present
      tags: packages
    
    - name: Add NodeSource GPG key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
        state: present
      tags: nodejs
    
    - name: Add NodeSource repository
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ node_version }} nodistro main"
        state: present
        filename: nodesource
      tags: nodejs
    
    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes
      tags: nodejs
    
    - name: Verify Node.js installation
      command: node --version
      register: node_version_output
      changed_when: false
      tags: nodejs
    
    - name: Display Node.js version
      debug:
        msg: "Node.js version installed: {{ node_version_output.stdout }}"
      tags: nodejs
    
    # Task 2: Create Application User
    - name: Create application user
      user:
        name: "{{ app_user }}"
        comment: "Recruitment Platform Application User"
        shell: /bin/bash
        create_home: yes
        state: present
      tags: users
    
    - name: Add application user to docker group (if exists)
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes
      ignore_errors: yes
      tags: users
    
    # Task 3: Manage Files and Directories
    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      tags: files
    
    - name: Create subdirectories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}/backend"
        - "{{ app_dir }}/frontend"
        - "{{ app_dir }}/logs"
        - "{{ app_dir }}/config"
      tags: files
    
    - name: Create .env template file
      copy:
        dest: "{{ app_dir }}/config/.env.template"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        content: |
          # Recruitment Platform Configuration Template
          NODE_ENV=production
          PORT=5000
          MONGO_URI=mongodb+srv://hi:bye@cluster0.xosnjiu.mongodb.net/recruit_dev?retryWrites=true&w=majority
          JWT_SECRET=supersecretchangeit
          GOOGLE_CLIENT_ID=966194838172-gpmru4pkkjv7d45lrejkkraf2it8k8vc.apps.googleusercontent.com
          JUDGE0_API_KEY=67d2a5ffa0msh83b415959a18d68p1e1719jsnb7514b0d1acb
          GOOGLE_API_KEY=AIzaSyAzKrfwiKdMnTfnG5HRvt7kPt9m1UkFJd8
      tags: files
    
    - name: Create application README
      copy:
        dest: "{{ app_dir }}/README.md"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        content: |
          # Recruitment Platform - Deployed Environment
          
          This directory contains the production deployment of the AI-powered recruitment platform.
          
          ## Directory Structure
          - backend/  - Backend Node.js application
          - frontend/ - Frontend React application
          - logs/     - Application logs
          - config/   - Configuration files
          
          ## User
          Application runs as: {{ app_user }}
          
          ## Managed by
          Ansible configuration management (DevOps CA2)
          Last updated: {{ ansible_date_time.iso8601 }}
      tags: files
    
    # Task 4: Install PM2 for Node.js process management
    - name: Install PM2 globally
      npm:
        name: pm2
        global: yes
        state: present
      tags: packages
    
    - name: Verify PM2 installation
      command: pm2 --version
      register: pm2_version_output
      changed_when: false
      tags: packages
    
    - name: Display PM2 version
      debug:
        msg: "PM2 version installed: {{ pm2_version_output.stdout }}"
      tags: packages
    
    # Final Summary
    - name: Configuration Summary
      debug:
        msg:
          - "=== Configuration Complete ==="
          - "Node.js: {{ node_version_output.stdout }}"
          - "PM2: {{ pm2_version_output.stdout }}"
          - "App User: {{ app_user }}"
          - "App Directory: {{ app_dir }}"
          - "Python: {{ ansible_python_version }}"
      tags: always